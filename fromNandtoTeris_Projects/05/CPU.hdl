// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    
    PARTS:
    Mux16(a=instruction, b=aluO,  sel=instruction[15], out=muxO1);
    Not(in=instruction[15], out=notOp);
    Or(a=instruction[5], b=notOp, out=aregL); 
    ARegister(in=muxO1, load=aregL, out=aregO);
    Mux16(a=aregO, b=inM, sel=instruction[12], out=muxO2);
    And(a=instruction[4], b=instruction[15], out=dregL);
    DRegister(in=aluO, load=dregL, out=dregO);
    

    Not(in=instruction[2], out=notj1);
    Not(in=instruction[1], out=notj2);
    Not(in=instruction[0], out=notj3);

    And(a=instruction[2], b=true, out=j1);
    And(a=instruction[1], b=true, out=j2);
    And(a=instruction[0], b=true, out=j3);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    And(a=notzr, b=notng, out=jgt); 
    And(a=zr, b=notng, out=jeq); 
    And(a=notzr, b=ng, out=jlt);
    Xor(a=zr, b=ng, out=jle);
    
    // term 1
    And(a=notj1, b=notj2, out=t11);
    And(a=j3, b=jgt, out=t12);
    And(a=t11, b=t12, out=t1);

    // term 2
    And(a=notj1, b=j2, out=t21);
    And(a=notj3, b=jeq, out=t22);
    And(a=t21, b=t22, out=t2);

    // term 3
    //And(a=notj1, b=j2, out=t21);
    And(a=j3, b=notng, out=t32);
    And(a=t21, b=t32, out=t3);

    // term 4
    And(a=j1, b=notj2, out=t41);
    And(a=notj3, b=jlt, out=t42);
    And(a=t41, b=t42, out=t4);

    // term 5
    //And(a=j1, b=notj2, out=t41);
    And(a=j3, b=notzr, out=t52);
    And(a=t41, b=t52, out=t5);

    // term 6
    And(a=j1, b=j2, out=t61);
    And(a=notj3, b=jle, out=t62);
    And(a=t61, b=t62, out=t6);


    // term 7
    //And(a=j1, b=j2, out=t61);
    And(a=t61, b=j3, out=t7);

    Or8Way(in[0]=false, in[1]=t1,in[2]=t2,in[3]=t3,in[4]=t4,in[5]=t5,in[6]=t6,in[7]=t7, out=pcload1);

    And(a=pcload1, b=instruction[15], out=pcload);
    Not(in=pcload, out=pcinc);
    PC(in=aregO, load=pcload, inc=pcinc, reset=reset, out[0..14]=pc);


    ALU(x=dregO, y=muxO2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluO, zr=zr, ng=ng);
    And16(a=aluO, b=true, out=outM);
    And16(a=aregO, b=true, out[0..14]=addressM);
    And(a=instruction[3], b=instruction[15], out=writeM);
}