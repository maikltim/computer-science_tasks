<class>
	<keyword> class </keyword>
<identifier> Main </identifier>
<identifierCat> class </identifierCat>
<identifierDef> defined </identifierDef>
<symbol> { </symbol>
<classVarDec>
	<keyword> static </keyword>
<keyword> boolean </keyword>
<identifier> test </identifier>
<identifierCat> STATIC </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> ; </symbol>
</classVarDec>
	<subroutineDec>
	<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> defined </identifierDef>
<symbol> ( </symbol>
<parameterList>
	</parameterList>
	<symbol> ) </symbol>
<subroutineBody>
	<symbol> { </symbol>
<varDec>
	<keyword> var </keyword>
<identifier> SquareGame </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<identifier> game </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> ; </symbol>
</varDec>
	<statements>
	<letStatement>
	<keyword> let </keyword>
<identifier> game </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<identifier> SquareGame </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<symbol> . </symbol>
<identifier> new </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> used </identifierDef>
<symbol> ( </symbol>
<expressionList>
	</expressionList>
	<symbol> ) </symbol>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	<doStatement>
	<keyword> do </keyword>
<identifier> game </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> . </symbol>
<identifier> run </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> used </identifierDef>
<symbol> ( </symbol>
<expressionList>
	</expressionList>
	<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
	<doStatement>
	<keyword> do </keyword>
<identifier> game </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> . </symbol>
<identifier> dispose </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> used </identifierDef>
<symbol> ( </symbol>
<expressionList>
	</expressionList>
	<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
	<returnStatement>
	<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
	</statements>
	<symbol> } </symbol>
</subroutineBody>
	</subroutineDec>
	<subroutineDec>
	<keyword> function </keyword>
<keyword> void </keyword>
<identifier> more </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> defined </identifierDef>
<symbol> ( </symbol>
<parameterList>
	</parameterList>
	<symbol> ) </symbol>
<subroutineBody>
	<symbol> { </symbol>
<varDec>
	<keyword> var </keyword>
<keyword> int </keyword>
<identifier> i </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> , </symbol>
<identifier> j </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> ; </symbol>
</varDec>
	<varDec>
	<keyword> var </keyword>
<identifier> String </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<identifier> s </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 3 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> ; </symbol>
</varDec>
	<varDec>
	<keyword> var </keyword>
<identifier> Array </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<identifier> a </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 4 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> ; </symbol>
</varDec>
	<statements>
	<ifStatement>
	<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
	<term>
	<keyword> false </keyword>
</term>
	</expression>
	<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
	<letStatement>
	<keyword> let </keyword>
<identifier> s </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 3 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<stringConstant> string constant </stringConstant>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	<letStatement>
	<keyword> let </keyword>
<identifier> s </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 3 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<keyword> null </keyword>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	<letStatement>
	<keyword> let </keyword>
<identifier> a </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 4 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> [ </symbol>
<expression>
	<term>
	<integerConstant> 1 </integerConstant>
</term>
	</expression>
	<symbol> ] </symbol>
<symbol> = </symbol>
<expression>
	<term>
	<identifier> a </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 4 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> [ </symbol>
<expression>
	<term>
	<integerConstant> 2 </integerConstant>
</term>
	</expression>
	<symbol> ] </symbol>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	</statements>
	<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
	<letStatement>
	<keyword> let </keyword>
<identifier> i </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<identifier> i </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> * </symbol>
<term>
	<symbol> ( </symbol>
<expression>
	<term>
	<symbol> - </symbol>
<term>
	<identifier> j </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	</term>
	</expression>
	<symbol> ) </symbol>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	<letStatement>
	<keyword> let </keyword>
<identifier> j </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<identifier> j </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> / </symbol>
<term>
	<symbol> ( </symbol>
<expression>
	<term>
	<symbol> - </symbol>
<term>
	<integerConstant> 2 </integerConstant>
</term>
	</term>
	</expression>
	<symbol> ) </symbol>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	<letStatement>
	<keyword> let </keyword>
<identifier> i </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<identifier> i </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> | </symbol>
<term>
	<identifier> j </identifier>
<identifierCat> VAR </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	</statements>
	<symbol> } </symbol>
</ifStatement>
	<returnStatement>
	<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
	</statements>
	<symbol> } </symbol>
</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
	