// Init code
@256
D=A
@SP
M=D

// call Sys.init 0
@retAddrLabel0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@addr
M=D
@SP
D=M
@addr
M=D-M
@0
D=A
@addr
M=M-D
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(retAddrLabel0)

// function Sys.init 0
(Sys.init)
@0
D=A
@i
M=D
(FUNC.LOOP0)
@i
D=M
@FUNC.STOP0
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
@i
M=M-1
@FUNC.LOOP0
0;JMP
(FUNC.STOP0)

// push constant 4
@4
D=A 
@SP
A=M
M=D
@SP
M=M+1

// call Main.fibonacci 1
@retAddrLabel1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@addr
M=D
@SP
D=M
@addr
M=D-M
@1
D=A
@addr
M=M-D
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(retAddrLabel1)

// label WHILE
(WHILE)

// goto WHILE
@WHILE
0;JMP

