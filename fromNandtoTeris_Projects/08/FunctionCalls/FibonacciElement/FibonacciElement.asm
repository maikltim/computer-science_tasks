// Init code
@256
D=A
@SP
M=D

// call Sys.init 0
@retAddrLabel0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@addr
M=D
@SP
D=M
@addr
M=D-M
@0
D=A
@addr
M=M-D
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(retAddrLabel0)

// function Sys.init 0
(Sys.init)
@0
D=A
@i
M=D
(FUNC.LOOP0)
@i
D=M
@FUNC.STOP0
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
@i
M=M-1
@FUNC.LOOP0
0;JMP
(FUNC.STOP0)

// push constant 4
@4
D=A 
@SP
A=M
M=D
@SP
M=M+1

// call Main.fibonacci 1
@retAddrLabel1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@addr
M=D
@SP
D=M
@addr
M=D-M
@1
D=A
@addr
M=M-D
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(retAddrLabel1)

// label WHILE
(WHILE)

// goto WHILE
@WHILE
0;JMP

// function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
@i
M=D
(FUNC.LOOP1)
@i
D=M
@FUNC.STOP1
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
@i
M=M-1
@FUNC.LOOP1
0;JMP
(FUNC.STOP1)

// push argument 0
@0
D=A
@addr
M=D
@ARG
D=M
@addr
M=M+D
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1

// push constant 2
@2
D=A 
@SP
A=M
M=D
@SP
M=M+1

// lt
@SP
M=M-1
A=M
D=M
@y
M=D
@SP
M=M-1
A=M
D=M
@x
M=D
@y
D=D-M
@LT0
D;JLT
@SP
A=M
M=0
@LT_END0
0;JMP
(LT0)
@SP
A=M
M=-1
(LT_END0)
@SP
M=M+1

// if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@IF_TRUE
D;JNE

// goto IF_FALSE
@IF_FALSE
0;JMP

// label IF_TRUE
(IF_TRUE)

// push argument 0
@0
D=A
@addr
M=D
@ARG
D=M
@addr
M=M+D
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1

// return
@LCL
D=M
@endFrame
M=D
@5
D=A
@addr
M=D 
@endFrame
D=M
@addr
M=D-M
A=M
D=M
@retAddr
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@endFrame
D=M
@addr
M=D-1
A=M
D=M
@THAT
M=D
@2
D=A
@addr
M=D 
@endFrame
D=M
@addr
M=D-M
A=M
D=M
@THIS
M=D
@3
D=A
@addr
M=D 
@endFrame
D=M
@addr
M=D-M
A=M
D=M
@ARG
M=D
@4
D=A
@addr
M=D 
@endFrame
D=M
@addr
M=D-M
A=M
D=M
@LCL
M=D
@retAddr
A=M
0;JMP

// label IF_FALSE
(IF_FALSE)

// push argument 0
@0
D=A
@addr
M=D
@ARG
D=M
@addr
M=M+D
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1

// push constant 2
@2
D=A 
@SP
A=M
M=D
@SP
M=M+1

// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1

// call Main.fibonacci 1
@retAddrLabel2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@addr
M=D
@SP
D=M
@addr
M=D-M
@1
D=A
@addr
M=M-D
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(retAddrLabel2)

// push argument 0
@0
D=A
@addr
M=D
@ARG
D=M
@addr
M=M+D
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1

// push constant 1
@1
D=A 
@SP
A=M
M=D
@SP
M=M+1

// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M-D
@SP
M=M+1

// call Main.fibonacci 1
@retAddrLabel3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@addr
M=D
@SP
D=M
@addr
M=D-M
@1
D=A
@addr
M=M-D
D=M
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(retAddrLabel3)

// add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
M=M+D
@SP
M=M+1

// return
@LCL
D=M
@endFrame
M=D
@5
D=A
@addr
M=D 
@endFrame
D=M
@addr
M=D-M
A=M
D=M
@retAddr
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@endFrame
D=M
@addr
M=D-1
A=M
D=M
@THAT
M=D
@2
D=A
@addr
M=D 
@endFrame
D=M
@addr
M=D-M
A=M
D=M
@THIS
M=D
@3
D=A
@addr
M=D 
@endFrame
D=M
@addr
M=D-M
A=M
D=M
@ARG
M=D
@4
D=A
@addr
M=D 
@endFrame
D=M
@addr
M=D-M
A=M
D=M
@LCL
M=D
@retAddr
A=M
0;JMP

