// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // Getting x = 0
  
      Not16(in=x, out=notx);
  
      Inc16(in=notx, out=incnotx);
      Add16(a=x, b=incnotx, out=zerox);
  
      Not16(in=zerox, out=notzerox);
  
      Mux4Way16(a=x, b=notx, c=zerox, d=notzerox, sel[0]=nx, sel[1]=zx    , out=x1);
  
      // Getting y = 0
      Not16(in=y, out=noty);
  
      Inc16(in=noty, out=incnoty);
      Add16(a=y, b=incnoty, out=zeroy);
  
      Not16(in=zeroy, out=notzeroy);
  
      Mux4Way16(a=y, b=noty, c=zeroy    , d=notzeroy, sel[0]=ny, sel[1]=zy    , out=y1);
  
      // Get x And y
      And16(a=x1, b=y1, out=xandy);
      Not16(in=xandy, out=notxandy);
  
      // Get x Add y
      Add16(a=x1, b=y1, out=xaddy);
      Not16(in=xaddy, out=notxaddy);
  
      // Final output
      Mux4Way16(a=xandy, b=notxandy,c=xaddy, d=notxaddy, sel[0]=no, sel[1]=f, out=out1);
      Or16(a=out1, b=false, out=out);
      Not16(in=out1, out=notout);
      Inc16(in=notout, out=tsout);

      // Zero status output
//      
  
//      Inc16(in=notout, out=incnotout);
//      Add16(a=out, b=incnotout, out=zeros);
//      Not16(in=zeros, out=ones);
//      Add16(a=out, b=ones, out=oo);
//      Not(in=zx, out=notzx);
//      Not(in=zy, out=notzy);
//      Not(in=f, out=notf);
      //Or8Way(in[0]=notzx, in[1]=nx, in[2]=notzy, in[3]=ny, in[4]=notf, in[5]=no, in[6]=false, in[7]=false, out=notzr);
      //
      Or16(a=tsout, b=false, out[15]=ts15);      
      Or16(a=out1, b=false, out[15]=out15);
      Or16(a=out1, b=false, out[15]=ng);
      Xor(a=out15, b=ts15, out=notzr);
      Not(in=notzr, out=zr);
}
