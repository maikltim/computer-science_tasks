<class>
	<keyword> class </keyword>
<identifier> Main </identifier>
<identifierCat> class </identifierCat>
<identifierDef> defined </identifierDef>
<symbol> { </symbol>
<subroutineDec>
	<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> defined </identifierDef>
<symbol> ( </symbol>
<parameterList>
	</parameterList>
	<symbol> ) </symbol>
<subroutineBody>
	<symbol> { </symbol>
<varDec>
	<keyword> var </keyword>
<keyword> int </keyword>
<identifier> value </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> ; </symbol>
</varDec>
	<statements>
	<doStatement>
	<keyword> do </keyword>
<identifier> Main </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<symbol> . </symbol>
<identifier> fillMemory </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> used </identifierDef>
<symbol> ( </symbol>
<expressionList>
	<expression>
	<term>
	<integerConstant> 8001 </integerConstant>
</term>
	</expression>
	<symbol> , </symbol>
<expression>
	<term>
	<integerConstant> 16 </integerConstant>
</term>
	</expression>
	<symbol> , </symbol>
<expression>
	<term>
	<symbol> - </symbol>
<term>
	<integerConstant> 1 </integerConstant>
</term>
	</term>
	</expression>
	</expressionList>
	<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
	<letStatement>
	<keyword> let </keyword>
<identifier> value </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<identifier> Memory </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<symbol> . </symbol>
<identifier> peek </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> used </identifierDef>
<symbol> ( </symbol>
<expressionList>
	<expression>
	<term>
	<integerConstant> 8000 </integerConstant>
</term>
	</expression>
	</expressionList>
	<symbol> ) </symbol>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	<doStatement>
	<keyword> do </keyword>
<identifier> Main </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<symbol> . </symbol>
<identifier> convert </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> used </identifierDef>
<symbol> ( </symbol>
<expressionList>
	<expression>
	<term>
	<identifier> value </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	</expression>
	</expressionList>
	<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
	<returnStatement>
	<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
	</statements>
	<symbol> } </symbol>
</subroutineBody>
	</subroutineDec>
	<subroutineDec>
	<keyword> function </keyword>
<keyword> void </keyword>
<identifier> convert </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> defined </identifierDef>
<symbol> ( </symbol>
<parameterList>
	<keyword> int </keyword>
<identifier> value </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> defined </identifierDef>
</parameterList>
	<symbol> ) </symbol>
<subroutineBody>
	<symbol> { </symbol>
<varDec>
	<keyword> var </keyword>
<keyword> int </keyword>
<identifier> mask </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> , </symbol>
<identifier> position </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> ; </symbol>
</varDec>
	<varDec>
	<keyword> var </keyword>
<keyword> boolean </keyword>
<identifier> loop </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> ; </symbol>
</varDec>
	<statements>
	<letStatement>
	<keyword> let </keyword>
<identifier> loop </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<keyword> true </keyword>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	<whileStatement>
	<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
	<term>
	<identifier> loop </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	</expression>
	<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
	<letStatement>
	<keyword> let </keyword>
<identifier> position </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<identifier> position </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> + </symbol>
<term>
	<integerConstant> 1 </integerConstant>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	<letStatement>
	<keyword> let </keyword>
<identifier> mask </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<identifier> Main </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<symbol> . </symbol>
<identifier> nextMask </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> used </identifierDef>
<symbol> ( </symbol>
<expressionList>
	<expression>
	<term>
	<identifier> mask </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	</expression>
	</expressionList>
	<symbol> ) </symbol>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	<ifStatement>
	<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
	<term>
	<symbol> ~ </symbol>
<term>
	<symbol> ( </symbol>
<expression>
	<term>
	<identifier> position </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> > </symbol>
<term>
	<integerConstant> 16 </integerConstant>
</term>
	</expression>
	<symbol> ) </symbol>
</term>
	</term>
	</expression>
	<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
	<ifStatement>
	<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
	<term>
	<symbol> ~ </symbol>
<term>
	<symbol> ( </symbol>
<expression>
	<term>
	<symbol> ( </symbol>
<expression>
	<term>
	<identifier> value </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> & </symbol>
<term>
	<identifier> mask </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	</expression>
	<symbol> ) </symbol>
</term>
	<symbol> = </symbol>
<term>
	<integerConstant> 0 </integerConstant>
</term>
	</expression>
	<symbol> ) </symbol>
</term>
	</term>
	</expression>
	<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
	<doStatement>
	<keyword> do </keyword>
<identifier> Memory </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<symbol> . </symbol>
<identifier> poke </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> used </identifierDef>
<symbol> ( </symbol>
<expressionList>
	<expression>
	<term>
	<integerConstant> 8000 </integerConstant>
</term>
	<symbol> + </symbol>
<term>
	<identifier> position </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	</expression>
	<symbol> , </symbol>
<expression>
	<term>
	<integerConstant> 1 </integerConstant>
</term>
	</expression>
	</expressionList>
	<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
	</statements>
	<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
	<doStatement>
	<keyword> do </keyword>
<identifier> Memory </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<symbol> . </symbol>
<identifier> poke </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> used </identifierDef>
<symbol> ( </symbol>
<expressionList>
	<expression>
	<term>
	<integerConstant> 8000 </integerConstant>
</term>
	<symbol> + </symbol>
<term>
	<identifier> position </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	</expression>
	<symbol> , </symbol>
<expression>
	<term>
	<integerConstant> 0 </integerConstant>
</term>
	</expression>
	</expressionList>
	<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
	</statements>
	<symbol> } </symbol>
</ifStatement>
	</statements>
	<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
	<letStatement>
	<keyword> let </keyword>
<identifier> loop </identifier>
<identifierCat> LOCAL </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<keyword> false </keyword>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	</statements>
	<symbol> } </symbol>
</ifStatement>
	</statements>
	<symbol> } </symbol>
</whileStatement>
	<returnStatement>
	<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
	</statements>
	<symbol> } </symbol>
</subroutineBody>
	</subroutineDec>
	<subroutineDec>
	<keyword> function </keyword>
<keyword> int </keyword>
<identifier> nextMask </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> defined </identifierDef>
<symbol> ( </symbol>
<parameterList>
	<keyword> int </keyword>
<identifier> mask </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> defined </identifierDef>
</parameterList>
	<symbol> ) </symbol>
<subroutineBody>
	<symbol> { </symbol>
<statements>
	<ifStatement>
	<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
	<term>
	<identifier> mask </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> = </symbol>
<term>
	<integerConstant> 0 </integerConstant>
</term>
	</expression>
	<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
	<returnStatement>
	<keyword> return </keyword>
<expression>
	<term>
	<integerConstant> 1 </integerConstant>
</term>
	</expression>
	<symbol> ; </symbol>
</returnStatement>
	</statements>
	<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<statements>
	<returnStatement>
	<keyword> return </keyword>
<expression>
	<term>
	<identifier> mask </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> * </symbol>
<term>
	<integerConstant> 2 </integerConstant>
</term>
	</expression>
	<symbol> ; </symbol>
</returnStatement>
	</statements>
	<symbol> } </symbol>
</ifStatement>
	</statements>
	<symbol> } </symbol>
</subroutineBody>
	</subroutineDec>
	<subroutineDec>
	<keyword> function </keyword>
<keyword> void </keyword>
<identifier> fillMemory </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> defined </identifierDef>
<symbol> ( </symbol>
<parameterList>
	<keyword> int </keyword>
<identifier> startAddress </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> length </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> defined </identifierDef>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> value </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> defined </identifierDef>
</parameterList>
	<symbol> ) </symbol>
<subroutineBody>
	<symbol> { </symbol>
<statements>
	<whileStatement>
	<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
	<term>
	<identifier> length </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> > </symbol>
<term>
	<integerConstant> 0 </integerConstant>
</term>
	</expression>
	<symbol> ) </symbol>
<symbol> { </symbol>
<statements>
	<doStatement>
	<keyword> do </keyword>
<identifier> Memory </identifier>
<identifierCat> class </identifierCat>
<identifierDef> used </identifierDef>
<symbol> . </symbol>
<identifier> poke </identifier>
<identifierCat> subroutine </identifierCat>
<identifierDef> used </identifierDef>
<symbol> ( </symbol>
<expressionList>
	<expression>
	<term>
	<identifier> startAddress </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	</expression>
	<symbol> , </symbol>
<expression>
	<term>
	<identifier> value </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 2 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	</expression>
	</expressionList>
	<symbol> ) </symbol>
<symbol> ; </symbol>
</doStatement>
	<letStatement>
	<keyword> let </keyword>
<identifier> length </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<identifier> length </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 1 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> - </symbol>
<term>
	<integerConstant> 1 </integerConstant>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	<letStatement>
	<keyword> let </keyword>
<identifier> startAddress </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
<symbol> = </symbol>
<expression>
	<term>
	<identifier> startAddress </identifier>
<identifierCat> ARG </identifierCat>
<identifierInd> 0 </identifierInd>
<identifierDef> used </identifierDef>
</term>
	<symbol> + </symbol>
<term>
	<integerConstant> 1 </integerConstant>
</term>
	</expression>
	<symbol> ; </symbol>
</letStatement>
	</statements>
	<symbol> } </symbol>
</whileStatement>
	<returnStatement>
	<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
	</statements>
	<symbol> } </symbol>
</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
	