// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int w, i;
        let w = 1;
        let i = 0;
        let twoToThe = Array.new(16);        

        while(i < 16) {
            let twoToThe[i] = w;
            let w = w + w;
            let i = i + 1;
        }
        return;
    }


    /** Returns true if the i-th bit of x is 1, false otherwise*/
    function boolean bit(int x, int i) {
        return (~((x & twoToThe[i]) = 0));
    }

    /** Returns true if the i-th bit of x is 1, false otherwise*/
    function int countBits(int x) {
        var int i;
        let i = 16;

        while(i > 0) {
            if(Math.bit(x,(i-1))) {
                return i+1;
            }
            let i = i - 1;
        }
        return 0;
    }


    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (Math.bit(x,15)) {
            return (-x); 
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {

        var int sum, shiftedX, w, index, nx, ny;
        var boolean sthBit;

        let sthBit = Math.bit(y,15);
        let sum = 0;
        let index = 0;
        let shiftedX = x;
        let w = 1;


        while((w < y) | (w =y)  | sthBit) {
            
            if(Math.bit(y, index)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let w = w + w;
            let index = index + 1;

            if (w = twoToThe[15]) {
                let sthBit = false;
            }
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        /*
            divide(5,2)
                divide(5,4)
                    q=divide(5,8) return 0
                return 1 
            q=1
            return 2

            algo1:
            if rem < y:
                return div
            div += largestNum()
            x = x - divs*div
            divide(rem, y)

            largestNum(divd,y):
                x=9
                s.setInt(divd);
                len = s.length();
                x = 9 * (len-2)*10
                if : 
                    return x
                else
                    x += 10
                
        */
        /*
            x=9, y=3

            divide(9,3)
                divide(9,6)
                    divide(9,12)
                    return 0
                q=0
                return 1
            q=1
            return 3
        */
        var int q, res;
        var boolean sthBit, xsthBit;

        let xsthBit = Math.bit(x,15);
        let sthBit = Math.bit(y,15);

        let x = Math.abs(x);
        let y = Math.abs(y);


        if((y > x) | (y < 0)) {
            return 0;
        }
    
        let q = Math.divide(x, (2*y));

        if(((x-((2*q)*y))) < y) {
            let res = (2*q);
        } else {
            let res = ((2*q) + 1);
        }
        if ((xsthBit & (~sthBit)) | ((~xsthBit) & sthBit)) { 
            return (-res);
        } else {
            return res;
        }
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, n, j2;
        /*
            x = 16
            y = sqr(x) = 4
            y = 0, 1, 2, 3, 4,...
            n = 5
            range 0...3
            
        */

        let y = 0;
        let j = (Math.divide(Math.countBits(x),2)-1 );
        let j2 = twoToThe[(j)];

        while((j > 0) | (j = 0)) {
            if (~(((y+j2)*(y+j2)) > x) & (((y+j2)*(y+j2)) > 0)) {
                let y = y + j2;
            }
            let j2 = Math.divide(j2,2);
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b) {
            return a;
        } else {
            return b;
        }
    }
}
